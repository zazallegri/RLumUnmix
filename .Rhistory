list.functions.in.file(rstudioapi::getSourceEditorContext()$path, alphabetic = TRUE)
getwd()
list.functions.in.file(all_functions.r, alphabetic = TRUE)
path
getwd(9)
getwd()
list.functions.in.file(all_functions, alphabetic = TRUE)
install.packages("NCmisc")
list.functions.in.file(filename, alphabetic = TRUE)
list.functions.in.file(all_functions.r, alphabetic = TRUE)
list.functions.in.file(all_functions, alphabetic = TRUE)
library("NCmisc")
list.functions.in.file(all_functions.r, alphabetic = TRUE)
library("NCmisc")
file.choose()
list.functions.in.file(file.choose())
output <- list.functions.in.file(file.choose())
View(output)
output[["package:utils"]]
output[["character(0)"]]
output[["package:graphics"]]
library(devtools)
use_package("sandbox")
output
keys(output)
colnames(output)
output
names(output)
use_package("base")
use_package("grDevices")
use_package("stats")
use_package("graphics")
use_package("methods")
use_package("utils")
use_package("RLumModel")
use_package("Luminescence")
use_package("xx")
use_package("fingerPro")
output
output[["character(0)"]]
use_package("ggpmisc")
use_package("glue")
use_package("hash")
use_package("reshape2")
use_package("base")
use_package("dplyr")
use_package("tcltk")
use_package("tgcd")
use_package("tgcd")
use_package("inflect")
use_package("Inflect")
use_package("parcma")
use_r("compare_parameters")
devtools::load_all(".")
install.packages("pracma")
library(pracma)
use_package("pracma")
devtools::load_all(".")
devtools::load_all(".")
compare_parameters()
compare_parameters()
.set_pars("Bailey2001")
library(RLumModel)
.set_pars("Bailey2001")
devtools::load_all(".")
compare_parameters(RLumModel::.set_pars("Bailey2001), RLumModel::.set_pars("Bailey2001))
compare_parameters(.set_pars("Bailey2001), .set_pars("Bailey2001))
library(RLumModel)
compare_parameters(.set_pars("Bailey2001), .set_pars("Bailey2001))
compare_parameters(RLumModel::.set_pars("Bailey2001), RLumModel::.set_pars("Bailey2001))
compare_parameters(RLumModel::.set_pars("Bailey2001"), RLumModel::.set_pars("Bailey2001"))
devtools::load_all(".")
compare_parameters(RLumModel::.set_pars("Bailey2001"), RLumModel::.set_pars("Bailey2001"))
use_r("measure_SAR_OSL_copy")
devtools::load_all(".")
devtools::load_all(".")
?measure_SAR_OSL_copy
use_r("prep_parameters_from_aliquot")
devtools::load_all(".")
devtools::load_all(".")
use_r("Make_custom_model_and_retrieve_OSL_TL_metrics")
devtools::load_all(".")
set_pars("Bailey2001")$n
.set_pars("Bailey2001")$n
.set_pars("Bailey2001")$n$n
use_r("Separate_numeric_and_non_numeric_part")
devtools::load_all(".")
devtools::load_all(".")
Separate_numeric_and_non_numeric_part("osl_E_th1)
Separate_numeric_and_non_numeric_part("osl_E_th1)
devtools::load_all(".")
Separate_numeric_and_non_numeric_part('osl_E_th1')
devtools::load_all(".")
devtools::load_all(".")
?Separate_numeric_and_non_numeric_part
use_r("Get_param_normal_dist_list_of_values")
devtools::load_all(".")
devtools::load_all(".")
?Get_param_normal_dist_list_of_values
use_r("Update_parameter_in_rulebook")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("set_Rule_for_all_model_parameters")
devtools::load_all(".")
devtools::load_all(".")
use_r("Perform_CTS_3_sources")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?Perform_CTS_3_sources
devtools::load_all(".")
use_r("Prepare_data_for_tracer_selection")
library("devtools")
use_r("Prepare_data_for_tracer_selection")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("Select_unmixing_tracers_2_sources")
devtools::load_all(".")
use_R("Select_data_for_unmixing")
use_r("Select_data_for_unmixing")
devtools::load_all(".")
devtools::load_all(".")
use_r("Make_luminescence_rulebook")
devtools::load_all(".")
devtools::load_all(".")
set_r("Compute_mean_median_proportions_differences")
use_r("Compute_mean_median_proportions_differences")
devtools::load_all(".")
devtools::load_all(".")
use_r("Plot_sources_proportions")
devtools::load_all(".")
devtools::load_all(".")
use_r("Plot_unmixing_proportions_and_get_results")
devtools::load_all(".")
devtools::load_all(".")
use_r("Get_metrics_for_proprotions_selection")
devtools::load_all(".")
devtools::load_all(".")
use_r("Complete_unmixing_routine")
devtools::load_all(".")
devtools::load_all(".")
use_r("Get_sequence")
devtools::load_all(".")
devtools::load_all(".")
use_r("OSL_metrics_hash_to_dataframe")
devtools::load_all(".")
devtools::load_all(".")
use_r("get_user_number_of_sequence_steps_input")
devtools::load_all(".")
devtools::load_all(".")
use_r("get_user_sequence_step_input")
devtools::load_all(".")
devtools::load_all(".")
use_r("get_PH_user_inputs")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?get_PH_user_inputs
devtools::load_all(".")
?get_PH_user_inputs
use_r("get_IRR_user_inputs")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("get_TL_user_inputs")
devtools::load_all(".")
devtools::load_all(".")
use_r("get_OSL_user_inputs")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("Create_sequence_manually")
devtools::load_all(".")
devtools::load_all(".")
use_r("Get_specific_columns")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("Get_OSL_metrics")
devtools::load_all(".")
devtools::load_all(".")
use_r("Generate_synthetic_OSL_TL_signals")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("Compute_OSL_metrics")
?Generate_synthetic_OSL_TL_signals
?Generate_synthetic_OSL_TL_signals()
devtools::load_all(".")
?Generate_synthetic_OSL_TL_signals
devtools::load_all(".")
?Compute_OSL_metrics
devtools::load_all(".")
use_r("TL_metrics_hash_to_dataframe")
devtools::load_all(".")
devtools::load_all(".")
??TL_metrics_hash_to_dataframe
?TL_metrics_hash_to_dataframe
use_r("Single_record_TL_OSL_metrics_df")
devtools::load_all(".")
devtools::load_all(".")
use_r("Extract_OSL_TL_metrics_for_all_records")
devtools::load_all(".")
devtools::load_all(".")
use_r("get_peak_user_inputs")
devtools::load_all(".")
devtools::load_all(".")
?get_peak_user_inputs
use_r("inflect")
devtools::load_all(".")
use_r("Get_peaks")
devtools::load_all(".")
devtools::load_all(".")
use_r("Add_last_datapoint_for_potential_peak")
devtools::load_all(".")
devtools::load_all(".")
use_r("Get_initial_peaks")
devtools::load_all(".")
devtools::load_all(".")
use_r("Get_initial_peaks_valleys")
devtools::load_all(".")
devtools::load_all(".")
use_r("#' @param df Data frame containing TL intensity and temperature
#' @param span Span for function inflect()")
use_r("Consecutive_min_max_intensity_threshold_check")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("Average_neighbouring_points_filtering")
devtools::load_all(".")
devtools::load_all(".")
use_r("Compute_intensity_std_moving_window")
devtools::load_all(".")
devtools::load_all(".")
use_r("Filter_peaks_using_std")
devtools::load_all(".")
devtools::load_all(".")
use_r("Keep_relevant_peaks")
devtools::load_all(".")
devtools::load_all(".")
use_r("Plot_smoothing")
devtools::load_all(".")
devtools::load_all(".")
use_r("TL_curve_smoothing")
devtools::load_all(".")
devtools::load_all(".")
use_r("Plot_TL_Curve")
devtools::load_all(".")
devtools::load_all(".")
use_r("Plot_TL_Curve_with_std")
devtools::load_all(".")
devtools::load_all(".")
library("devtools")
devtools::load_all(".")
use_r("Plot_TL_Curve_with_extrema")
devtools::load_all(".")
devtools::load_all(".")
?Plot_TL_Curve_with_extrema
?Plot_TL_Curve_with_std
use_r("Plot_TL_Peaks")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_r("DIY_TL_peak_intensities_integration")
devtools::load_all(".")
?Plot_TL_Peaks
devtools::load_all(".")
?DIY_TL_peak_intensities_integration
use_r("Get_TL_metrics")
devtools::load_all(".")
devtools::load_all(".")
use_r("Compute_TL_metrics")
devtools::load_all(".")
?Compute_TL_metrics
use_r("Rename_sequence")
devtools::load_all(".")
devtools::load_all(".")
?Rename_sequence
read.csv(file = "../RLumXsandbox/Code/EXAMPLE_data/0.25-0.5-0.25.csv")
0.25-0.5-0.25 <- read.csv(file = "../RLumXsandbox/Code/EXAMPLE_data/0.25-0.5-0.25.csv")
oui <- read.csv(file = "../RLumXsandbox/Code/EXAMPLE_data/0.25-0.5-0.25.csv")
use_data(oui)
devtools::load_all(".")
fpath <- system.file("extdata/unmixing_samples/Sample_1", "0.5-0.5.csv", package="RLumUnmix")
fpath
fpath <- system.file("extdata, package="RLumUnmix")
fpath <- system.file("extdata", package="RLumUnmix")
fpath
ls(fpath)
fpath <- system.file("extdata", package="RLumUnmix")
Get_sequence(paste0(fpath, "/SEQ_file.SEQ"), 0.1)
read_BIN2R(file = paste0(fpath, "binx_file.binx"), fastForward = FALSE)
use_import_from()
use_import_from(sandbox)
use_import_from("sandbox")
use_import_from("base")
use_import_from("dplyr")
use_import_from("fingerPro")
use_import_from("ggpmisc")
use_import_from("glue")
devtools::load_all(".")
fpath
seq_path <- paste0(fpath, "/SEQ_example.SEQ")
seq_path
devtools::load_all(".")
Get_sequence(seq_path, 0.1)
seq_path <- paste0(fpath, "/SEQ_file.SEQ")
Get_sequence(seq_path, 0.1)
library("NCmisc")
list.functions.in.file("R/Get_sequence.R", alphabetic = TRUE)
devtools::load_all(".")
devtools::load_all(".")
?Add_last_datapoint_for_potential_peak
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
hash()
library(hash)
test<- hash()
test
hasah::hash()
test2 <- hash::hash()
test2
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
get_OSL_user_inputs()
devtools::load_all(".")
get_OSL_user_inputs()
devtools::load_all(".")
get_OSL_user_inputs()
devtools::load_all(".")
get_peak_user_inputs("Record_1")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
get_PH_user_inputs()
devtools::load_all(".")
devtools::load_all(".")
get_TL_user_inputs()
devtools::load_all(".")
get_user_number_of_sequence_steps_input()
get_user_sequence_step_input(1)
devtools::load_all(".")
get_user_sequence_step_input(1)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?points
?par
?graphics::par
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
RLumModel::.set_pars("Bailey2001")
RLumModel::set_pars("Bailey2001")
RLumModel:set_pars("Bailey2001")
RLumModel::.set_pars("Bailey2001")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
help(package = "RLumUnmix")
library(devtools)
library(RLumUnmix)
use_vignette("Basic_RLumUnmix_functions", title = "Basic RLumUnmix functions")
fpath <- system.file("extdata", package="RLumUnmix")
fpath
data_path <- system.file("extdata", package="RLumUnmix")
ix)
nmix)
opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RLumUnmix)
data_path <- system.file("extdata", package="RLumUnmix")
example_sequence <- Get_sequence(file_path = paste0(data_path, "SEQ_file.SEQ"), lab_dose_rate = 0.2)
paste0(data_path, "SEQ_file.SEQ")
library(RLumUnmix)
data_path <- system.file("extdata/", package="RLumUnmix")
example_sequence <- Get_sequence(file_path = paste0(data_path, "SEQ_file.SEQ"), lab_dose_rate = 0.2)
example_sequence <- Get_sequence(file_path = paste0(data_path, "SEQ_file.SEQ"), lab_dose_rate = 0.2)
library(RLumUnmix)
data_path <- system.file("extdata", package="RLumUnmix")
example_sequence <- Get_sequence(file_path = paste0(data_path, "/SEQ_file.SEQ"), lab_dose_rate = 0.2)
example_sequence
options(warn = -1)
example_sequence <- Get_sequence(file_path = paste0(data_path, "/SEQ_file.SEQ"), lab_dose_rate = 0.2)
example_sequence
example_sequence <- Get_sequence(file_path = paste0(data_path, "/SEQ_file.SEQ"), lab_dose_rate = 0.2)
example_sequence
manual_sequence <- Create_sequence_manually()
manual_sequence <- Create_sequence_manually()
manual_sequence
saveRDS(manual_sequence, file = paste0(data_path, "manual_sequence.RData"), compress = FALSE)
example_manual_sequence <- Get_sequence(file_path = paste0(data_path, "manual_sequence.RData"), lab_dose_rate = 0.2)
example_manual_sequence
data <- Generate_synthetic_OSL_TL_signals(sequence = example_sequence, model = "Bailey2001")
data
OSL_metrics <- Compute_OSL_metrics(sequence = example_sequence, data = get_RLum(data, recordType ='OSL$' , drop = FALSE))
OSL_metrics <- Compute_OSL_metrics(sequence = example_sequence, data = RLUmModel::get_RLum(data, recordType ='OSL$' , drop = FALSE))
